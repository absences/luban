using Luban;

{{namespace_with_grace_begin __namespace}}
public partial class {{__name}}
{
    {{~for table in __tables ~}}
{{~if table.comment != '' ~}}
    /// <summary>
    /// {{escape_comment table.comment}}
    /// </summary>
{{~end~}}
    private {{table.full_name}} {{format_property_name __code_style table.name}} {get; }
    {{~end~}}

    public System.Collections.Generic.Dictionary<System.Type, System.Collections.Generic.Dictionary<int, BeanBase>> allTypesCfg = new();
    public System.Collections.Generic.Dictionary<System.Type, BeanBase> instanceCfg = new();
    public {{__name}}(System.Func<string, ByteBuf> loader)
    {
        {{~for table in __tables ~}}
        {{format_property_name __code_style table.name}} = new {{table.full_name}}(loader("{{table.output_data_file}}"));
        {{~end~}}
        ResolveRef();
    }
    
    private void ResolveRef()
    {
        {{~for table in __tables ~}}
        {{format_property_name __code_style table.name}}.ResolveRef(this);
        {{~end~}}
    }

    public T Get<T>(int? id = null) where T : BeanBase
    {
        var type = typeof(T);

        if (id != null)
        {
            if (allTypesCfg.TryGetValue(type, out var cfgDic))
                if (cfgDic.TryGetValue((int)id, out BeanBase cfgObj))
                    return cfgObj as T;
        }
        else
        {
            if (instanceCfg.TryGetValue(type, out BeanBase cfgObj))
                return cfgObj as T;
        }
        Logger.LogWarning(string.Format("can't find {0} config with id {1}", type.FullName, id));
        return null;
    }
    public System.Collections.Generic.Dictionary<int, BeanBase> GetAll<T>() where T : BeanBase
    {
        var type = typeof(T);
        if (allTypesCfg.TryGetValue(type, out var dic))
            return dic;
        return null;
    }
}

{{namespace_with_grace_end __namespace}}